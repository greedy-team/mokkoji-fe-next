name: Dev Env (Start/Stop/Restart/Deploy)

on:
  workflow_dispatch:
    inputs:
      cmd:
        description: 'start | stop | restart | deploy'
        required: true
        default: 'start'

jobs:
  dev:
    runs-on: ubuntu-latest

    steps:
      - name: Control Dev Server via SSH
        env:
          NEXT_PUBLIC_API_URL_DEV: ${{ secrets.NEXT_PUBLIC_API_URL_DEV }}
          NEXT_PUBLIC_SENTRY_DSN: ${{ secrets.NEXT_PUBLIC_SENTRY_DSN }}
          NEXT_PUBLIC_SENTRY_REPLAY_DSN: ${{ secrets.NEXT_PUBLIC_SENTRY_REPLAY_DSN }}
          NEXT_PUBLIC_CLARITY_ID: ${{ secrets.NEXT_PUBLIC_CLARITY_ID }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          NEXT_PUBLIC_S3_DOMAIN: ${{ secrets.NEXT_PUBLIC_S3_DOMAIN_DEV }}

        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script_stop: true
          envs: NEXT_PUBLIC_API_URL_DEV,NEXT_PUBLIC_SENTRY_DSN,NEXT_PUBLIC_SENTRY_REPLAY_DSN,NEXT_PUBLIC_CLARITY_ID,NEXTAUTH_SECRET,DISCORD_WEBHOOK_URL,NEXT_PUBLIC_S3_DOMAIN_DEV
          script: |
            set -e

            APP_DIR="/home/ubuntu/mokkoji-fe-dev"
            BRANCH="dev"
            APP_NAME="mokkoji-dev"
            PORT=3001

            require_var() {
              var="$1"
              eval val="\${$var}"
              if [ -z "${val+x}" ]; then
                echo "‚ùå ERROR: '$var' not set" >&2
                exit 1
              fi
              if [ -z "$val" ]; then
                echo "‚ùå ERROR: '$var' empty" >&2
                exit 1
              fi
            }

            echo "üü¢ CMD: ${{ github.event.inputs.cmd }}"
            CMD="${{ github.event.inputs.cmd }}"

            # Start
            if [ "$CMD" = "start" ]; then
              echo "üöÄ Starting Dev Server..."
              cd "$APP_DIR"
              git fetch --all
              git checkout "$BRANCH"
              git pull --ff-only

              ENV_FILE="$APP_DIR/.env.local"
              rm -f "$ENV_FILE"
              touch "$ENV_FILE"
              {
                echo "NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL_DEV"
                echo "NEXT_PUBLIC_SENTRY_DSN=$NEXT_PUBLIC_SENTRY_DSN"
                echo "NEXT_PUBLIC_SENTRY_REPLAY_DSN=$NEXT_PUBLIC_SENTRY_REPLAY_DSN"
                echo "NEXT_PUBLIC_CLARITY_ID=$NEXT_PUBLIC_CLARITY_ID"
                echo "NEXTAUTH_SECRET=$NEXTAUTH_SECRET"
                echo "DISCORD_WEBHOOK_URL=$DISCORD_WEBHOOK_URL"
                echo "NEXT_PUBLIC_S3_DOMAIN=$NEXT_PUBLIC_S3_DOMAIN_DEV"
              } >> "$ENV_FILE"

              if command -v pnpm >/dev/null 2>&1; then
                pnpm install --frozen-lockfile --prefer-offline
                pnpm build
                pm2 describe "$APP_NAME" >/dev/null 2>&1 || pm2 start "pnpm start -- -p $PORT" --name "$APP_NAME"
              else
                npm ci
                npm run build
                pm2 describe "$APP_NAME" >/dev/null 2>&1 || pm2 start "npm run start -- -p $PORT" --name "$APP_NAME"
              fi

              pm2 save
              echo "‚úÖ Dev server started (port $PORT)"

            # Stop
            elif [ "$CMD" = "stop" ]; then
              echo "üõë Stopping Dev Server..."
              pm2 stop "$APP_NAME" || true
              pm2 delete "$APP_NAME" || true
              pm2 save || true
              echo "‚úÖ Dev server stopped."

            # Restart
            elif [ "$CMD" = "restart" ]; then
              echo "üîÅ Restarting Dev Server..."
              pm2 restart "$APP_NAME" || { echo "‚ö†Ô∏è Not running, starting new process..."; pm2 start "pnpm start -- -p $PORT" --name "$APP_NAME"; }
              pm2 save
              echo "‚úÖ Dev server restarted."

            # Deploy
            elif [ "$CMD" = "deploy" ]; then
              echo "üì¶ Deploying latest dev build..."
              cd "$APP_DIR"
              git fetch --all
              git checkout "$BRANCH"
              git pull --ff-only

              if command -v pnpm >/dev/null 2>&1; then
                pnpm install --frozen-lockfile --prefer-offline
                pnpm build
                pm2 restart "$APP_NAME" || pm2 start "pnpm start -- -p $PORT" --name "$APP_NAME"
              else
                npm ci
                npm run build
                pm2 restart "$APP_NAME" || pm2 start "npm run start -- -p $PORT" --name "$APP_NAME"
              fi

              pm2 save
              echo "‚úÖ Dev deploy complete (branch=$BRANCH, port=$PORT)"

            else
              echo "‚ùå Unknown command: $CMD"
              exit 1
            fi
