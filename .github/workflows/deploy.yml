name: Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      env:
        description: 'Choose environment (dev or prod)'
        required: true
        default: 'dev'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script_stop: true
          envs: GITHUB_EVENT_NAME,GITHUB_INPUT_ENV,NEXT_PUBLIC_API_URL_PROD,NEXT_PUBLIC_API_URL_DEV,NEXT_PUBLIC_SENTRY_DSN,NEXT_PUBLIC_SENTRY_REPLAY_DSN,NEXT_PUBLIC_CLARITY_ID,NEXTAUTH_SECRET,DISCORD_WEBHOOK_URL,NEXT_PUBLIC_S3_DOMAIN
          script: |
            set -e
            set -x

            APP_DIR="/home/ubuntu/mokkoji-fe"

            TARGET_ENV="${GITHUB_INPUT_ENV:-prod}"

            if [ "$TARGET_ENV" = "prod" ]; then
              BRANCH="main"
              APP_NAME="mokkoji-prod"
              PORT=3000
              API_URL="$NEXT_PUBLIC_API_URL_PROD"
              NODE_ENV="production"
            else
              BRANCH="dev"
              APP_NAME="mokkoji-dev"
              PORT=3001
              API_URL="$NEXT_PUBLIC_API_URL_DEV"
              NODE_ENV="development"
            fi

            cd "$APP_DIR"
            git fetch --all
            git checkout "$BRANCH"
            git pull --ff-only

            ENV_FILE="$APP_DIR/.env.local"
            rm -f "$ENV_FILE"
            touch "$ENV_FILE"

            echo "NEXT_PUBLIC_API_URL=$API_URL" >> "$ENV_FILE"
            echo "NEXT_PUBLIC_SENTRY_DSN=$NEXT_PUBLIC_SENTRY_DSN" >> "$ENV_FILE"
            echo "NEXT_PUBLIC_SENTRY_REPLAY_DSN=$NEXT_PUBLIC_SENTRY_REPLAY_DSN" >> "$ENV_FILE"
            echo "NEXT_PUBLIC_CLARITY_ID=$NEXT_PUBLIC_CLARITY_ID" >> "$ENV_FILE"
            echo "NEXTAUTH_SECRET=$NEXTAUTH_SECRET" >> "$ENV_FILE"
            echo "DISCORD_WEBHOOK_URL=$DISCORD_WEBHOOK_URL" >> "$ENV_FILE"
            echo "NEXT_PUBLIC_S3_DOMAIN=$NEXT_PUBLIC_S3_DOMAIN" >> "$ENV_FILE"

            echo "✅ Generated .env.local content:"
            cat "$ENV_FILE"

            if command -v pnpm >/dev/null 2>&1; then
              pnpm install --frozen-lockfile --prefer-offline
              pnpm build
              pm2 restart "$APP_NAME" || pm2 start "pnpm start -- -p $PORT" --name "$APP_NAME"
            else
              npm ci
              npm run build
              pm2 restart "$APP_NAME" || pm2 start "npm run start -- -p $PORT" --name "$APP_NAME"
            fi

            pm2 save
            echo "✅ Deployment complete for $APP_NAME ($TARGET_ENV)"
