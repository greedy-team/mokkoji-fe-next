name: Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      env:
        description: 'Choose environment (dev or prod)'
        required: true
        default: 'dev'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script_stop: true
          envs: GITHUB_EVENT_NAME=${{ github.event_name }},GITHUB_INPUT_ENV=${{ github.event.inputs.env }},NEXT_PUBLIC_API_URL_PROD=${{ secrets.NEXT_PUBLIC_API_URL_PROD }},NEXT_PUBLIC_API_URL_DEV=${{ secrets.NEXT_PUBLIC_API_URL_DEV }},NEXT_PUBLIC_SENTRY_DSN=${{ secrets.NEXT_PUBLIC_SENTRY_DSN }},NEXT_PUBLIC_SENTRY_REPLAY_DSN=${{ secrets.NEXT_PUBLIC_SENTRY_REPLAY_DSN }},NEXT_PUBLIC_CLARITY_ID=${{ secrets.NEXT_PUBLIC_CLARITY_ID }},NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }},DISCORD_WEBHOOK_URL=${{ secrets.DISCORD_WEBHOOK_URL }},NEXT_PUBLIC_S3_DOMAIN=${{ secrets.NEXT_PUBLIC_S3_DOMAIN }}
          script: |
            set -e

            APP_DIR="/var/www/mokkoji-fe"

            # Determine target environment
            if [ "$GITHUB_EVENT_NAME" = "push" ]; then
              TARGET_ENV="prod"
            else
              TARGET_ENV="$GITHUB_INPUT_ENV"
            fi

            echo "üîß Deploying environment: $TARGET_ENV"

            if [ "$TARGET_ENV" = "prod" ]; then
              BRANCH="main"
              APP_NAME="mokkoji-prod"
              PORT=3000
              API_URL="$NEXT_PUBLIC_API_URL_PROD"
              NODE_ENV="production"
            else
              BRANCH="dev"
              APP_NAME="mokkoji-dev"
              PORT=3001
              API_URL="$NEXT_PUBLIC_API_URL_DEV"
              NODE_ENV="development"
            fi

            export PNPM_HOME="$HOME/.local/share/pnpm"
            export PATH="$PNPM_HOME:$PATH"

            cd "$APP_DIR"
            echo "üì¶ Fetching latest code from branch: $BRANCH"
            git fetch --all
            git checkout "$BRANCH"
            git pull --ff-only

            echo "üìù Writing .env.local ..."
            cat <<EOF > .env.local
            NEXT_PUBLIC_API_URL=$API_URL
            NEXT_PUBLIC_SENTRY_DSN=$NEXT_PUBLIC_SENTRY_DSN
            NEXT_PUBLIC_SENTRY_REPLAY_DSN=$NEXT_PUBLIC_SENTRY_REPLAY_DSN
            NEXT_PUBLIC_CLARITY_ID=$NEXT_PUBLIC_CLARITY_ID
            NEXTAUTH_SECRET=$NEXTAUTH_SECRET
            DISCORD_WEBHOOK_URL=$DISCORD_WEBHOOK_URL
            NEXT_PUBLIC_S3_DOMAIN=$NEXT_PUBLIC_S3_DOMAIN
            EOF

            if command -v pnpm >/dev/null 2>&1; then
              echo "üöÄ Using pnpm"
              pnpm install --frozen-lockfile --prefer-offline
              pnpm build
              pm2 restart "$APP_NAME" || pm2 start "pnpm start -- -p $PORT" --name "$APP_NAME"
            else
              echo "üöÄ Using npm"
              npm ci
              npm run build
              pm2 restart "$APP_NAME" || pm2 start "npm run start -- -p $PORT" --name "$APP_NAME"
            fi

            pm2 save
            echo "‚úÖ Deployment complete for $APP_NAME ($TARGET_ENV)"
