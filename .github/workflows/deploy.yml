name: Universal Deploy (Auto-Create & Overwrite)

on:
  workflow_call:
    inputs:
      env:
        description: '배포 환경 (dev | prod)'
        required: true
        type: string
      cmd:
        description: '실행 명령 (deploy | restart | stop)'
        required: false
        default: 'deploy'
        type: string
    secrets:
      SSH_HOST:
        required: true
      SSH_USER:
        required: true
      SSH_KEY:
        required: true
      NEXTAUTH_SECRET:
        required: true
      DISCORD_WEBHOOK_URL:
        required: true
      NEXT_PUBLIC_SENTRY_DSN:
        required: true
      NEXT_PUBLIC_SENTRY_REPLAY_DSN:
        required: true
      NEXT_PUBLIC_CLARITY_ID:
        required: true
      NEXT_PUBLIC_API_URL_DEV:
        required: false
      NEXT_PUBLIC_API_URL_PROD:
        required: false
      NEXT_PUBLIC_S3_DOMAIN_DEV:
        required: false
      NEXT_PUBLIC_S3_DOMAIN_PROD:
        required: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    env:
      CMD: ${{ inputs.cmd }}
      ENV: ${{ inputs.env }}
      APP_NAME: mokkoji-${{ inputs.env }}
      APP_PORT: ${{ inputs.env == 'prod' && 3000 || 3001 }}
      APP_DIR: /home/ubuntu/mokkoji-fe-${{ inputs.env }}
      NEXT_PUBLIC_API_URL: ${{ inputs.env == 'prod' && secrets.NEXT_PUBLIC_API_URL_PROD || secrets.NEXT_PUBLIC_API_URL_DEV }}
      NEXT_PUBLIC_S3_DOMAIN: ${{ inputs.env == 'prod' && secrets.NEXT_PUBLIC_S3_DOMAIN_PROD || secrets.NEXT_PUBLIC_S3_DOMAIN_DEV }}
      NEXTAUTH_URL: ${{ inputs.env == 'prod' && 'https://www.mokkoji.site' || 'https://dev.mokkoji.site' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js & pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Write .env.local
        run: |
          echo "NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}" >> .env.local
          echo "NEXT_PUBLIC_S3_DOMAIN=${NEXT_PUBLIC_S3_DOMAIN}" >> .env.local
          echo "NEXT_PUBLIC_SENTRY_DSN=${{ secrets.NEXT_PUBLIC_SENTRY_DSN }}" >> .env.local
          echo "NEXT_PUBLIC_SENTRY_REPLAY_DSN=${{ secrets.NEXT_PUBLIC_SENTRY_REPLAY_DSN }}" >> .env.local
          echo "NEXT_PUBLIC_CLARITY_ID=${{ secrets.NEXT_PUBLIC_CLARITY_ID }}" >> .env.local
          echo "NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}" >> .env.local
          echo "DISCORD_WEBHOOK_URL=${{ secrets.DISCORD_WEBHOOK_URL }}" >> .env.local
          echo "NEXTAUTH_URL=${NEXTAUTH_URL}" >> .env.local
          echo "✅ .env.local 작성 완료 (${ENV})"

      - name: Build Next.js
        if: env.CMD == 'deploy'
        run: |
          echo "${ENV} 빌드 시작..."
          pnpm install --frozen-lockfile --prefer-offline
          NODE_OPTIONS="--max-old-space-size=4096" pnpm build --no-lint
          echo "✅ ${ENV} 빌드 완료."
          ls -alh .next || (echo "❌ .next 폴더 없음!" && exit 1)

      - name: Ensure target directory exists
        if: env.CMD == 'deploy'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script_stop: true
          script: |
            mkdir -p "$APP_DIR"
            echo "✅ ${APP_DIR} 생성 확인 완료."

      - name: Upload build output (auto overwrite)
        if: env.CMD == 'deploy'
        uses: appleboy/scp-action@v0.1.5
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: |
            ./.next
            ./.env.local
            ./package.json
            ./pnpm-lock.yaml
          target: ${{ env.APP_DIR }}
          overwrite: true

      - name: Install dependencies & PM2 zero-downtime control
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script_stop: true
          script: |
            set -e
            cd "$APP_DIR"

            echo "⚙️ 실행 환경: ${ENV}"
            echo "명령: ${CMD}"

            if [ "$CMD" = "deploy" ]; then
              echo "의존성 동기화 중..."
              pnpm install --frozen-lockfile --prefer-offline
              echo "✅ 의존성 설치 완료."

              echo "무중단 배포 시작..."
              pm2 reload "$APP_NAME" --update-env || \
                pm2 start "pnpm exec next start -p $APP_PORT" \
                  --name "$APP_NAME" \
                  --cwd "$APP_DIR"
              pm2 save
              echo "✅ ${ENV} 배포 완료 (port=$APP_PORT)"

            elif [ "$CMD" = "restart" ]; then
              pm2 reload "$APP_NAME" --update-env || true
              echo "✅ ${ENV} 서버 재시작 완료."

            elif [ "$CMD" = "stop" ]; then
              pm2 stop "$APP_NAME" || true
              pm2 delete "$APP_NAME" || true
              pm2 save || true
              echo "🛑 ${ENV} 서버 중지 완료."
            fi
