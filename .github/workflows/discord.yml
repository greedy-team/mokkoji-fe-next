name: GitHub → Discord (Enhanced Embed Style)

on:
  issues:
    types: [opened, reopened, closed]
  pull_request:
    types: [opened, reopened, closed]   # merged 없음. closed + merged 플래그로 판단
  push:
    branches: ['**']
  release:
    types: [published]

jobs:
  discord-notification:
    runs-on: ubuntu-latest
    steps:
      - name: Send Enhanced Discord Notification
        shell: bash
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          set -euo pipefail

          # jq 설치
          if ! command -v jq >/dev/null; then
            sudo apt-get update -y && sudo apt-get install -y jq
          fi

          # 포크 PR 등 시크릿 미노출 시 스킵
          if [ -z "${DISCORD_WEBHOOK_URL:-}" ]; then
            echo "::warning:: DISCORD_WEBHOOK_URL is empty. Skipping."
            exit 0
          fi

          EVENT_NAME="$GITHUB_EVENT_NAME"
          REPO_NAME="$GITHUB_REPOSITORY"
          AUTHOR_NAME="$GITHUB_ACTOR"
          AUTHOR_AVATAR="$(jq -r '.sender.avatar_url' "$GITHUB_EVENT_PATH")"

          COLOR=9807270
          EMOJI=""
          TITLE=""
          URL=""
          DESCRIPTION=""

          # 멀티라인 본문 200자 트림
          trim_body () { awk -v max=200 '{out=out $0 ORS} END{ if (length(out)>max){ print substr(out,1,max-3) "..."} else { printf "%s", out }}'; }

          case "$EVENT_NAME" in
            issues)
              action=$(jq -r '.action' "$GITHUB_EVENT_PATH")
              number=$(jq -r '.issue.number' "$GITHUB_EVENT_PATH")
              ititle=$(jq -r '.issue.title // "(no title)"' "$GITHUB_EVENT_PATH")
              ibody=$(jq -r '.issue.body // ""' "$GITHUB_EVENT_PATH" | trim_body)
              URL=$(jq -r '.issue.html_url' "$GITHUB_EVENT_PATH")

              case "$action" in
                opened)   COLOR=15965202; EMOJI="🆕"; TITLE="새로운 이슈가 생성되었습니다!";;
                reopened) COLOR=15965202; EMOJI="🔄"; TITLE="이슈가 다시 열렸습니다";;
                closed)   COLOR=10181046; EMOJI="✅"; TITLE="이슈가 닫혔습니다";;
                *) exit 0;;
              esac
              DESCRIPTION="**#${number} ${ititle}**\n\n${ibody}"
              ;;

            pull_request)
              action=$(jq -r '.action' "$GITHUB_EVENT_PATH")
              merged=$(jq -r '.pull_request.merged' "$GITHUB_EVENT_PATH")
              number=$(jq -r '.pull_request.number' "$GITHUB_EVENT_PATH")
              ptitle=$(jq -r '.pull_request.title // "(no title)"' "$GITHUB_EVENT_PATH")
              pbody=$(jq -r '.pull_request.body // ""' "$GITHUB_EVENT_PATH" | trim_body)
              head=$(jq -r '.pull_request.head.ref' "$GITHUB_EVENT_PATH")
              base=$(jq -r '.pull_request.base.ref' "$GITHUB_EVENT_PATH")
              URL=$(jq -r '.pull_request.html_url' "$GITHUB_EVENT_PATH")

              if [ "$action" = "closed" ] && [ "$merged" = "true" ]; then
                COLOR=9323693; EMOJI="🎉"; TITLE="Pull Request가 병합되었습니다!"
              else
                case "$action" in
                  opened)   COLOR=3066993; EMOJI="🔀"; TITLE="새로운 Pull Request가 생성되었습니다!";;
                  reopened) COLOR=3066993; EMOJI="🔄"; TITLE="Pull Request가 다시 열렸습니다";;
                  closed)   COLOR=15158332; EMOJI="❌"; TITLE="Pull Request가 닫혔습니다";;
                  *) exit 0;;
                esac
              fi
              DESCRIPTION="**#${number} ${ptitle}**\n\n\`${head}\` → \`${base}\`\n\n${pbody}"
              ;;

            push)
              branch="$GITHUB_REF_NAME"
              commit_message=$(jq -r '.head_commit.message // ""' "$GITHUB_EVENT_PATH" | trim_body)
              commit_author=$(jq -r '.head_commit.author.name // ""' "$GITHUB_EVENT_PATH")
              URL=$(jq -r '.compare' "$GITHUB_EVENT_PATH")

              COLOR=3447003; EMOJI="📝"; TITLE="새로운 커밋이 푸시되었습니다!"
              DESCRIPTION="**브랜치:** \`${branch}\`\n**커밋:** ${commit_message}\n**작성자:** ${commit_author}"
              ;;

            release)
              action=$(jq -r '.action' "$GITHUB_EVENT_PATH")
              [ "$action" = "published" ] || exit 0
              tag=$(jq -r '.release.tag_name' "$GITHUB_EVENT_PATH")
              rname=$(jq -r '.release.name // ""' "$GITHUB_EVENT_PATH")
              rbody=$(jq -r '.release.body // ""' "$GITHUB_EVENT_PATH" | trim_body)
              URL=$(jq -r '.release.html_url' "$GITHUB_EVENT_PATH")

              COLOR=16766720; EMOJI="🚀"; TITLE="새로운 릴리즈가 발행되었습니다!"
              DESCRIPTION="**${tag} - ${rname}**\n\n${rbody}"
              ;;

            *) exit 0;;
          esac

          ts="$(date -u +%Y-%m-%dT%H:%M:%SZ)"

          payload=$(jq -n \
            --arg t "${EMOJI} ${TITLE}" \
            --arg d "$DESCRIPTION" \
            --arg url "$URL" \
            --arg name "$AUTHOR_NAME" \
            --arg icon "$AUTHOR_AVATAR" \
            --arg repo "$REPO_NAME" \
            --arg ev "$EVENT_NAME" \
            --arg ts "$ts" \
            --arg footer "GitHub → Discord" \
            --arg footer_icon "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png" \
            --arg repo_url "https://github.com/$REPO_NAME" \
            --argjson color "$COLOR" \
            '{
              embeds: [{
                title: $t,
                description: $d,
                url: $url,
                color: $color,
                author: { name: $name, icon_url: $icon },
                fields: [
                  { name: "Repository", value: ("[`" + $repo + "`](" + $repo_url + ")"), inline: true },
                  { name: "Event",      value: ("`" + $ev + "`"), inline: true }
                ],
                footer: { text: $footer, icon_url: $footer_icon },
                timestamp: $ts
              }]
            }')

          code=$(curl -sS -o /tmp/resp.txt -w "%{http_code}" \
            -H "Content-Type: application/json" \
            --data "$payload" \
            "$DISCORD_WEBHOOK_URL")

          echo "Discord HTTP $code"
          if [ "$code" != "204" ]; then
            echo "::error:: Discord webhook failed"
            cat /tmp/resp.txt || true
            exit 1
          fi
